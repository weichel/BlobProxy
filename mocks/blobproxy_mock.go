// Code generated by MockGen. DO NOT EDIT.
// Source: proto/barracuda.pb.go

// Package mock_barracuda is a generated GoMock package.
package mock_barracuda

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/weichel/BlobProxy/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBlobProxyClient is a mock of BlobProxyClient interface
type MockBlobProxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobProxyClientMockRecorder
}

// MockBlobProxyClientMockRecorder is the mock recorder for MockBlobProxyClient
type MockBlobProxyClientMockRecorder struct {
	mock *MockBlobProxyClient
}

// NewMockBlobProxyClient creates a new mock instance
func NewMockBlobProxyClient(ctrl *gomock.Controller) *MockBlobProxyClient {
	mock := &MockBlobProxyClient{ctrl: ctrl}
	mock.recorder = &MockBlobProxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobProxyClient) EXPECT() *MockBlobProxyClientMockRecorder {
	return m.recorder
}

// ReadBlob mocks base method
func (m *MockBlobProxyClient) ReadBlob(ctx context.Context, in *proto.ReadBlobRequest, opts ...grpc.CallOption) (*proto.ReadBlobResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadBlob", varargs...)
	ret0, _ := ret[0].(*proto.ReadBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBlob indicates an expected call of ReadBlob
func (mr *MockBlobProxyClientMockRecorder) ReadBlob(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlob", reflect.TypeOf((*MockBlobProxyClient)(nil).ReadBlob), varargs...)
}

// MockBlobProxyServer is a mock of BlobProxyServer interface
type MockBlobProxyServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobProxyServerMockRecorder
}

// MockBlobProxyServerMockRecorder is the mock recorder for MockBlobProxyServer
type MockBlobProxyServerMockRecorder struct {
	mock *MockBlobProxyServer
}

// NewMockBlobProxyServer creates a new mock instance
func NewMockBlobProxyServer(ctrl *gomock.Controller) *MockBlobProxyServer {
	mock := &MockBlobProxyServer{ctrl: ctrl}
	mock.recorder = &MockBlobProxyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobProxyServer) EXPECT() *MockBlobProxyServerMockRecorder {
	return m.recorder
}

// ReadBlob mocks base method
func (m *MockBlobProxyServer) ReadBlob(arg0 context.Context, arg1 *proto.ReadBlobRequest) (*proto.ReadBlobResponse, error) {
	ret := m.ctrl.Call(m, "ReadBlob", arg0, arg1)
	ret0, _ := ret[0].(*proto.ReadBlobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBlob indicates an expected call of ReadBlob
func (mr *MockBlobProxyServerMockRecorder) ReadBlob(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBlob", reflect.TypeOf((*MockBlobProxyServer)(nil).ReadBlob), arg0, arg1)
}
